///
/// BarkMovement.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIHelpers.hpp>)
#include <NitroModules/JSIHelpers.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `BarkVtxo` to properly resolve imports.
namespace margelo::nitro::nitroark { struct BarkVtxo; }
// Forward declaration of `BarkMovementRecipient` to properly resolve imports.
namespace margelo::nitro::nitroark { struct BarkMovementRecipient; }

#include <string>
#include "BarkVtxo.hpp"
#include <vector>
#include "BarkMovementRecipient.hpp"

namespace margelo::nitro::nitroark {

  /**
   * A struct which can be represented as a JavaScript object (BarkMovement).
   */
  struct BarkMovement {
  public:
    double id     SWIFT_PRIVATE;
    std::string kind     SWIFT_PRIVATE;
    double fees     SWIFT_PRIVATE;
    std::vector<BarkVtxo> spends     SWIFT_PRIVATE;
    std::vector<BarkVtxo> receives     SWIFT_PRIVATE;
    std::vector<BarkMovementRecipient> recipients     SWIFT_PRIVATE;
    std::string created_at     SWIFT_PRIVATE;

  public:
    BarkMovement() = default;
    explicit BarkMovement(double id, std::string kind, double fees, std::vector<BarkVtxo> spends, std::vector<BarkVtxo> receives, std::vector<BarkMovementRecipient> recipients, std::string created_at): id(id), kind(kind), fees(fees), spends(spends), receives(receives), recipients(recipients), created_at(created_at) {}
  };

} // namespace margelo::nitro::nitroark

namespace margelo::nitro {

  // C++ BarkMovement <> JS BarkMovement (object)
  template <>
  struct JSIConverter<margelo::nitro::nitroark::BarkMovement> final {
    static inline margelo::nitro::nitroark::BarkMovement fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitroark::BarkMovement(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "id")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "kind")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "fees")),
        JSIConverter<std::vector<margelo::nitro::nitroark::BarkVtxo>>::fromJSI(runtime, obj.getProperty(runtime, "spends")),
        JSIConverter<std::vector<margelo::nitro::nitroark::BarkVtxo>>::fromJSI(runtime, obj.getProperty(runtime, "receives")),
        JSIConverter<std::vector<margelo::nitro::nitroark::BarkMovementRecipient>>::fromJSI(runtime, obj.getProperty(runtime, "recipients")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "created_at"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitroark::BarkMovement& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "id", JSIConverter<double>::toJSI(runtime, arg.id));
      obj.setProperty(runtime, "kind", JSIConverter<std::string>::toJSI(runtime, arg.kind));
      obj.setProperty(runtime, "fees", JSIConverter<double>::toJSI(runtime, arg.fees));
      obj.setProperty(runtime, "spends", JSIConverter<std::vector<margelo::nitro::nitroark::BarkVtxo>>::toJSI(runtime, arg.spends));
      obj.setProperty(runtime, "receives", JSIConverter<std::vector<margelo::nitro::nitroark::BarkVtxo>>::toJSI(runtime, arg.receives));
      obj.setProperty(runtime, "recipients", JSIConverter<std::vector<margelo::nitro::nitroark::BarkMovementRecipient>>::toJSI(runtime, arg.recipients));
      obj.setProperty(runtime, "created_at", JSIConverter<std::string>::toJSI(runtime, arg.created_at));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!nitro::isPlainObject(runtime, obj)) {
        return false;
      }
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "id"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "kind"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "fees"))) return false;
      if (!JSIConverter<std::vector<margelo::nitro::nitroark::BarkVtxo>>::canConvert(runtime, obj.getProperty(runtime, "spends"))) return false;
      if (!JSIConverter<std::vector<margelo::nitro::nitroark::BarkVtxo>>::canConvert(runtime, obj.getProperty(runtime, "receives"))) return false;
      if (!JSIConverter<std::vector<margelo::nitro::nitroark::BarkMovementRecipient>>::canConvert(runtime, obj.getProperty(runtime, "recipients"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "created_at"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
