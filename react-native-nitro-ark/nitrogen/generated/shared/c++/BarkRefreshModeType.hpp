///
/// BarkRefreshModeType.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::nitroark {

  /**
   * An enum which can be represented as a JavaScript union (BarkRefreshModeType).
   */
  enum class BarkRefreshModeType {
    DEFAULTTHRESHOLD      SWIFT_NAME(defaultthreshold) = 0,
    THRESHOLDBLOCKS      SWIFT_NAME(thresholdblocks) = 1,
    THRESHOLDHOURS      SWIFT_NAME(thresholdhours) = 2,
    COUNTERPARTY      SWIFT_NAME(counterparty) = 3,
    ALL      SWIFT_NAME(all) = 4,
    SPECIFIC      SWIFT_NAME(specific) = 5,
  } CLOSED_ENUM;

} // namespace margelo::nitro::nitroark

namespace margelo::nitro {

  using namespace margelo::nitro::nitroark;

  // C++ BarkRefreshModeType <> JS BarkRefreshModeType (union)
  template <>
  struct JSIConverter<BarkRefreshModeType> final {
    static inline BarkRefreshModeType fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("DefaultThreshold"): return BarkRefreshModeType::DEFAULTTHRESHOLD;
        case hashString("ThresholdBlocks"): return BarkRefreshModeType::THRESHOLDBLOCKS;
        case hashString("ThresholdHours"): return BarkRefreshModeType::THRESHOLDHOURS;
        case hashString("Counterparty"): return BarkRefreshModeType::COUNTERPARTY;
        case hashString("All"): return BarkRefreshModeType::ALL;
        case hashString("Specific"): return BarkRefreshModeType::SPECIFIC;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum BarkRefreshModeType - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, BarkRefreshModeType arg) {
      switch (arg) {
        case BarkRefreshModeType::DEFAULTTHRESHOLD: return JSIConverter<std::string>::toJSI(runtime, "DefaultThreshold");
        case BarkRefreshModeType::THRESHOLDBLOCKS: return JSIConverter<std::string>::toJSI(runtime, "ThresholdBlocks");
        case BarkRefreshModeType::THRESHOLDHOURS: return JSIConverter<std::string>::toJSI(runtime, "ThresholdHours");
        case BarkRefreshModeType::COUNTERPARTY: return JSIConverter<std::string>::toJSI(runtime, "Counterparty");
        case BarkRefreshModeType::ALL: return JSIConverter<std::string>::toJSI(runtime, "All");
        case BarkRefreshModeType::SPECIFIC: return JSIConverter<std::string>::toJSI(runtime, "Specific");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert BarkRefreshModeType to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("DefaultThreshold"):
        case hashString("ThresholdBlocks"):
        case hashString("ThresholdHours"):
        case hashString("Counterparty"):
        case hashString("All"):
        case hashString("Specific"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
