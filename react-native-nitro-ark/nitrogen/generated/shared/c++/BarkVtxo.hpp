///
/// BarkVtxo.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::nitroark {

  /**
   * A struct which can be represented as a JavaScript object (BarkVtxo).
   */
  struct BarkVtxo {
  public:
    double amount     SWIFT_PRIVATE;
    double expiry_height     SWIFT_PRIVATE;
    std::string asp_pubkey     SWIFT_PRIVATE;
    double exit_delta     SWIFT_PRIVATE;
    std::string anchor_point     SWIFT_PRIVATE;
    std::string point     SWIFT_PRIVATE;

  public:
    BarkVtxo() = default;
    explicit BarkVtxo(double amount, double expiry_height, std::string asp_pubkey, double exit_delta, std::string anchor_point, std::string point): amount(amount), expiry_height(expiry_height), asp_pubkey(asp_pubkey), exit_delta(exit_delta), anchor_point(anchor_point), point(point) {}
  };

} // namespace margelo::nitro::nitroark

namespace margelo::nitro {

  // C++ BarkVtxo <> JS BarkVtxo (object)
  template <>
  struct JSIConverter<margelo::nitro::nitroark::BarkVtxo> final {
    static inline margelo::nitro::nitroark::BarkVtxo fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitroark::BarkVtxo(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "amount")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "expiry_height")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "asp_pubkey")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "exit_delta")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "anchor_point")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "point"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitroark::BarkVtxo& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "amount", JSIConverter<double>::toJSI(runtime, arg.amount));
      obj.setProperty(runtime, "expiry_height", JSIConverter<double>::toJSI(runtime, arg.expiry_height));
      obj.setProperty(runtime, "asp_pubkey", JSIConverter<std::string>::toJSI(runtime, arg.asp_pubkey));
      obj.setProperty(runtime, "exit_delta", JSIConverter<double>::toJSI(runtime, arg.exit_delta));
      obj.setProperty(runtime, "anchor_point", JSIConverter<std::string>::toJSI(runtime, arg.anchor_point));
      obj.setProperty(runtime, "point", JSIConverter<std::string>::toJSI(runtime, arg.point));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "amount"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "expiry_height"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "asp_pubkey"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "exit_delta"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "anchor_point"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "point"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
