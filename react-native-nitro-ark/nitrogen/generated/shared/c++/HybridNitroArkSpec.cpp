///
/// HybridNitroArkSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "HybridNitroArkSpec.hpp"

namespace margelo::nitro::nitroark {

  void HybridNitroArkSpec::loadHybridMethods() {
    // load base methods/properties
    HybridObject::loadHybridMethods();
    // load custom methods/properties
    registerHybrids(this, [](Prototype& prototype) {
      prototype.registerHybridMethod("createMnemonic", &HybridNitroArkSpec::createMnemonic);
      prototype.registerHybridMethod("createWallet", &HybridNitroArkSpec::createWallet);
      prototype.registerHybridMethod("loadWallet", &HybridNitroArkSpec::loadWallet);
      prototype.registerHybridMethod("isWalletLoaded", &HybridNitroArkSpec::isWalletLoaded);
      prototype.registerHybridMethod("closeWallet", &HybridNitroArkSpec::closeWallet);
      prototype.registerHybridMethod("persistConfig", &HybridNitroArkSpec::persistConfig);
      prototype.registerHybridMethod("maintenance", &HybridNitroArkSpec::maintenance);
      prototype.registerHybridMethod("maintenanceRefresh", &HybridNitroArkSpec::maintenanceRefresh);
      prototype.registerHybridMethod("sync", &HybridNitroArkSpec::sync);
      prototype.registerHybridMethod("syncExits", &HybridNitroArkSpec::syncExits);
      prototype.registerHybridMethod("syncRounds", &HybridNitroArkSpec::syncRounds);
      prototype.registerHybridMethod("getArkInfo", &HybridNitroArkSpec::getArkInfo);
      prototype.registerHybridMethod("offchainBalance", &HybridNitroArkSpec::offchainBalance);
      prototype.registerHybridMethod("deriveStoreNextKeypair", &HybridNitroArkSpec::deriveStoreNextKeypair);
      prototype.registerHybridMethod("peakKeyPair", &HybridNitroArkSpec::peakKeyPair);
      prototype.registerHybridMethod("newAddress", &HybridNitroArkSpec::newAddress);
      prototype.registerHybridMethod("signMessage", &HybridNitroArkSpec::signMessage);
      prototype.registerHybridMethod("signMesssageWithMnemonic", &HybridNitroArkSpec::signMesssageWithMnemonic);
      prototype.registerHybridMethod("deriveKeypairFromMnemonic", &HybridNitroArkSpec::deriveKeypairFromMnemonic);
      prototype.registerHybridMethod("verifyMessage", &HybridNitroArkSpec::verifyMessage);
      prototype.registerHybridMethod("getVtxos", &HybridNitroArkSpec::getVtxos);
      prototype.registerHybridMethod("getExpiringVtxos", &HybridNitroArkSpec::getExpiringVtxos);
      prototype.registerHybridMethod("onchainBalance", &HybridNitroArkSpec::onchainBalance);
      prototype.registerHybridMethod("onchainSync", &HybridNitroArkSpec::onchainSync);
      prototype.registerHybridMethod("onchainListUnspent", &HybridNitroArkSpec::onchainListUnspent);
      prototype.registerHybridMethod("onchainUtxos", &HybridNitroArkSpec::onchainUtxos);
      prototype.registerHybridMethod("onchainAddress", &HybridNitroArkSpec::onchainAddress);
      prototype.registerHybridMethod("onchainSend", &HybridNitroArkSpec::onchainSend);
      prototype.registerHybridMethod("onchainDrain", &HybridNitroArkSpec::onchainDrain);
      prototype.registerHybridMethod("onchainSendMany", &HybridNitroArkSpec::onchainSendMany);
      prototype.registerHybridMethod("boardAmount", &HybridNitroArkSpec::boardAmount);
      prototype.registerHybridMethod("boardAll", &HybridNitroArkSpec::boardAll);
      prototype.registerHybridMethod("validateArkoorAddress", &HybridNitroArkSpec::validateArkoorAddress);
      prototype.registerHybridMethod("sendArkoorPayment", &HybridNitroArkSpec::sendArkoorPayment);
      prototype.registerHybridMethod("sendLightningPayment", &HybridNitroArkSpec::sendLightningPayment);
      prototype.registerHybridMethod("sendLnaddr", &HybridNitroArkSpec::sendLnaddr);
      prototype.registerHybridMethod("sendRoundOnchainPayment", &HybridNitroArkSpec::sendRoundOnchainPayment);
      prototype.registerHybridMethod("bolt11Invoice", &HybridNitroArkSpec::bolt11Invoice);
      prototype.registerHybridMethod("lightningReceiveStatus", &HybridNitroArkSpec::lightningReceiveStatus);
      prototype.registerHybridMethod("finishLightningReceive", &HybridNitroArkSpec::finishLightningReceive);
      prototype.registerHybridMethod("offboardSpecific", &HybridNitroArkSpec::offboardSpecific);
      prototype.registerHybridMethod("offboardAll", &HybridNitroArkSpec::offboardAll);
    });
  }

} // namespace margelo::nitro::nitroark
