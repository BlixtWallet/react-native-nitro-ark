///
/// OffchainBalanceResult.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif





namespace margelo::nitro::nitroark {

  /**
   * A struct which can be represented as a JavaScript object (OffchainBalanceResult).
   */
  struct OffchainBalanceResult {
  public:
    double spendable     SWIFT_PRIVATE;
    double pending_lightning_send     SWIFT_PRIVATE;
    double pending_exit     SWIFT_PRIVATE;

  public:
    OffchainBalanceResult() = default;
    explicit OffchainBalanceResult(double spendable, double pending_lightning_send, double pending_exit): spendable(spendable), pending_lightning_send(pending_lightning_send), pending_exit(pending_exit) {}
  };

} // namespace margelo::nitro::nitroark

namespace margelo::nitro {

  using namespace margelo::nitro::nitroark;

  // C++ OffchainBalanceResult <> JS OffchainBalanceResult (object)
  template <>
  struct JSIConverter<OffchainBalanceResult> final {
    static inline OffchainBalanceResult fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return OffchainBalanceResult(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "spendable")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "pending_lightning_send")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "pending_exit"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const OffchainBalanceResult& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "spendable", JSIConverter<double>::toJSI(runtime, arg.spendable));
      obj.setProperty(runtime, "pending_lightning_send", JSIConverter<double>::toJSI(runtime, arg.pending_lightning_send));
      obj.setProperty(runtime, "pending_exit", JSIConverter<double>::toJSI(runtime, arg.pending_exit));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "spendable"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "pending_lightning_send"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "pending_exit"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
