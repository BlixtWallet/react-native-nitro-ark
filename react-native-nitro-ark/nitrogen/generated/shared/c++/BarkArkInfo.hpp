///
/// BarkArkInfo.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::nitroark {

  /**
   * A struct which can be represented as a JavaScript object (BarkArkInfo).
   */
  struct BarkArkInfo {
  public:
    std::string network     SWIFT_PRIVATE;
    std::string asp_pubkey     SWIFT_PRIVATE;
    double round_interval_secs     SWIFT_PRIVATE;
    double vtxo_exit_delta     SWIFT_PRIVATE;
    double vtxo_expiry_delta     SWIFT_PRIVATE;
    double htlc_expiry_delta     SWIFT_PRIVATE;
    double max_vtxo_amount_sat     SWIFT_PRIVATE;

  public:
    BarkArkInfo() = default;
    explicit BarkArkInfo(std::string network, std::string asp_pubkey, double round_interval_secs, double vtxo_exit_delta, double vtxo_expiry_delta, double htlc_expiry_delta, double max_vtxo_amount_sat): network(network), asp_pubkey(asp_pubkey), round_interval_secs(round_interval_secs), vtxo_exit_delta(vtxo_exit_delta), vtxo_expiry_delta(vtxo_expiry_delta), htlc_expiry_delta(htlc_expiry_delta), max_vtxo_amount_sat(max_vtxo_amount_sat) {}
  };

} // namespace margelo::nitro::nitroark

namespace margelo::nitro {

  using namespace margelo::nitro::nitroark;

  // C++ BarkArkInfo <> JS BarkArkInfo (object)
  template <>
  struct JSIConverter<BarkArkInfo> final {
    static inline BarkArkInfo fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return BarkArkInfo(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "network")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "asp_pubkey")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "round_interval_secs")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "vtxo_exit_delta")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "vtxo_expiry_delta")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "htlc_expiry_delta")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "max_vtxo_amount_sat"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const BarkArkInfo& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "network", JSIConverter<std::string>::toJSI(runtime, arg.network));
      obj.setProperty(runtime, "asp_pubkey", JSIConverter<std::string>::toJSI(runtime, arg.asp_pubkey));
      obj.setProperty(runtime, "round_interval_secs", JSIConverter<double>::toJSI(runtime, arg.round_interval_secs));
      obj.setProperty(runtime, "vtxo_exit_delta", JSIConverter<double>::toJSI(runtime, arg.vtxo_exit_delta));
      obj.setProperty(runtime, "vtxo_expiry_delta", JSIConverter<double>::toJSI(runtime, arg.vtxo_expiry_delta));
      obj.setProperty(runtime, "htlc_expiry_delta", JSIConverter<double>::toJSI(runtime, arg.htlc_expiry_delta));
      obj.setProperty(runtime, "max_vtxo_amount_sat", JSIConverter<double>::toJSI(runtime, arg.max_vtxo_amount_sat));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "network"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "asp_pubkey"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "round_interval_secs"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "vtxo_exit_delta"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "vtxo_expiry_delta"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "htlc_expiry_delta"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "max_vtxo_amount_sat"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
