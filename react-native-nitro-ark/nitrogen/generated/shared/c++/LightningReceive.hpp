///
/// LightningReceive.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>
#include <optional>

namespace margelo::nitro::nitroark {

  /**
   * A struct which can be represented as a JavaScript object (LightningReceive).
   */
  struct LightningReceive {
  public:
    std::string payment_hash     SWIFT_PRIVATE;
    std::string payment_preimage     SWIFT_PRIVATE;
    std::string invoice     SWIFT_PRIVATE;
    std::optional<double> preimage_revealed_at     SWIFT_PRIVATE;

  public:
    LightningReceive() = default;
    explicit LightningReceive(std::string payment_hash, std::string payment_preimage, std::string invoice, std::optional<double> preimage_revealed_at): payment_hash(payment_hash), payment_preimage(payment_preimage), invoice(invoice), preimage_revealed_at(preimage_revealed_at) {}
  };

} // namespace margelo::nitro::nitroark

namespace margelo::nitro {

  // C++ LightningReceive <> JS LightningReceive (object)
  template <>
  struct JSIConverter<margelo::nitro::nitroark::LightningReceive> final {
    static inline margelo::nitro::nitroark::LightningReceive fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitroark::LightningReceive(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "payment_hash")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "payment_preimage")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "invoice")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "preimage_revealed_at"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitroark::LightningReceive& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "payment_hash", JSIConverter<std::string>::toJSI(runtime, arg.payment_hash));
      obj.setProperty(runtime, "payment_preimage", JSIConverter<std::string>::toJSI(runtime, arg.payment_preimage));
      obj.setProperty(runtime, "invoice", JSIConverter<std::string>::toJSI(runtime, arg.invoice));
      obj.setProperty(runtime, "preimage_revealed_at", JSIConverter<std::optional<double>>::toJSI(runtime, arg.preimage_revealed_at));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "payment_hash"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "payment_preimage"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "invoice"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "preimage_revealed_at"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
