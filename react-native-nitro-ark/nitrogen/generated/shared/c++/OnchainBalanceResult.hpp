///
/// OnchainBalanceResult.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIHelpers.hpp>)
#include <NitroModules/JSIHelpers.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif





namespace margelo::nitro::nitroark {

  /**
   * A struct which can be represented as a JavaScript object (OnchainBalanceResult).
   */
  struct OnchainBalanceResult {
  public:
    double immature     SWIFT_PRIVATE;
    double trusted_pending     SWIFT_PRIVATE;
    double untrusted_pending     SWIFT_PRIVATE;
    double confirmed     SWIFT_PRIVATE;

  public:
    OnchainBalanceResult() = default;
    explicit OnchainBalanceResult(double immature, double trusted_pending, double untrusted_pending, double confirmed): immature(immature), trusted_pending(trusted_pending), untrusted_pending(untrusted_pending), confirmed(confirmed) {}
  };

} // namespace margelo::nitro::nitroark

namespace margelo::nitro {

  // C++ OnchainBalanceResult <> JS OnchainBalanceResult (object)
  template <>
  struct JSIConverter<margelo::nitro::nitroark::OnchainBalanceResult> final {
    static inline margelo::nitro::nitroark::OnchainBalanceResult fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitroark::OnchainBalanceResult(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "immature")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "trusted_pending")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "untrusted_pending")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "confirmed"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitroark::OnchainBalanceResult& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "immature", JSIConverter<double>::toJSI(runtime, arg.immature));
      obj.setProperty(runtime, "trusted_pending", JSIConverter<double>::toJSI(runtime, arg.trusted_pending));
      obj.setProperty(runtime, "untrusted_pending", JSIConverter<double>::toJSI(runtime, arg.untrusted_pending));
      obj.setProperty(runtime, "confirmed", JSIConverter<double>::toJSI(runtime, arg.confirmed));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!nitro::isPlainObject(runtime, obj)) {
        return false;
      }
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "immature"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "trusted_pending"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "untrusted_pending"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "confirmed"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
