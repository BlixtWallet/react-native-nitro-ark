///
/// BarkMovementRecipient.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIHelpers.hpp>)
#include <NitroModules/JSIHelpers.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::nitroark {

  /**
   * A struct which can be represented as a JavaScript object (BarkMovementRecipient).
   */
  struct BarkMovementRecipient {
  public:
    std::string recipient     SWIFT_PRIVATE;
    double amount_sat     SWIFT_PRIVATE;

  public:
    BarkMovementRecipient() = default;
    explicit BarkMovementRecipient(std::string recipient, double amount_sat): recipient(recipient), amount_sat(amount_sat) {}
  };

} // namespace margelo::nitro::nitroark

namespace margelo::nitro {

  // C++ BarkMovementRecipient <> JS BarkMovementRecipient (object)
  template <>
  struct JSIConverter<margelo::nitro::nitroark::BarkMovementRecipient> final {
    static inline margelo::nitro::nitroark::BarkMovementRecipient fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitroark::BarkMovementRecipient(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "recipient")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "amount_sat"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitroark::BarkMovementRecipient& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "recipient", JSIConverter<std::string>::toJSI(runtime, arg.recipient));
      obj.setProperty(runtime, "amount_sat", JSIConverter<double>::toJSI(runtime, arg.amount_sat));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!nitro::isPlainObject(runtime, obj)) {
        return false;
      }
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "recipient"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "amount_sat"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
