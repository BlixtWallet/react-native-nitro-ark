///
/// ArkoorPaymentResult.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `BarkVtxo` to properly resolve imports.
namespace margelo::nitro::nitroark { struct BarkVtxo; }
// Forward declaration of `PaymentTypes` to properly resolve imports.
namespace margelo::nitro::nitroark { enum class PaymentTypes; }

#include <string>
#include "BarkVtxo.hpp"
#include <vector>
#include "PaymentTypes.hpp"

namespace margelo::nitro::nitroark {

  /**
   * A struct which can be represented as a JavaScript object (ArkoorPaymentResult).
   */
  struct ArkoorPaymentResult {
  public:
    double amount_sat     SWIFT_PRIVATE;
    std::string destination_pubkey     SWIFT_PRIVATE;
    std::vector<BarkVtxo> vtxos     SWIFT_PRIVATE;
    PaymentTypes payment_type     SWIFT_PRIVATE;

  public:
    ArkoorPaymentResult() = default;
    explicit ArkoorPaymentResult(double amount_sat, std::string destination_pubkey, std::vector<BarkVtxo> vtxos, PaymentTypes payment_type): amount_sat(amount_sat), destination_pubkey(destination_pubkey), vtxos(vtxos), payment_type(payment_type) {}
  };

} // namespace margelo::nitro::nitroark

namespace margelo::nitro {

  // C++ ArkoorPaymentResult <> JS ArkoorPaymentResult (object)
  template <>
  struct JSIConverter<margelo::nitro::nitroark::ArkoorPaymentResult> final {
    static inline margelo::nitro::nitroark::ArkoorPaymentResult fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitroark::ArkoorPaymentResult(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "amount_sat")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "destination_pubkey")),
        JSIConverter<std::vector<margelo::nitro::nitroark::BarkVtxo>>::fromJSI(runtime, obj.getProperty(runtime, "vtxos")),
        JSIConverter<margelo::nitro::nitroark::PaymentTypes>::fromJSI(runtime, obj.getProperty(runtime, "payment_type"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitroark::ArkoorPaymentResult& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "amount_sat", JSIConverter<double>::toJSI(runtime, arg.amount_sat));
      obj.setProperty(runtime, "destination_pubkey", JSIConverter<std::string>::toJSI(runtime, arg.destination_pubkey));
      obj.setProperty(runtime, "vtxos", JSIConverter<std::vector<margelo::nitro::nitroark::BarkVtxo>>::toJSI(runtime, arg.vtxos));
      obj.setProperty(runtime, "payment_type", JSIConverter<margelo::nitro::nitroark::PaymentTypes>::toJSI(runtime, arg.payment_type));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "amount_sat"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "destination_pubkey"))) return false;
      if (!JSIConverter<std::vector<margelo::nitro::nitroark::BarkVtxo>>::canConvert(runtime, obj.getProperty(runtime, "vtxos"))) return false;
      if (!JSIConverter<margelo::nitro::nitroark::PaymentTypes>::canConvert(runtime, obj.getProperty(runtime, "payment_type"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
