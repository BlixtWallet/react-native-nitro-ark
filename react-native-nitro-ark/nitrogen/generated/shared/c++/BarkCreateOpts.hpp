///
/// BarkCreateOpts.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIHelpers.hpp>)
#include <NitroModules/JSIHelpers.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `BarkConfigOpts` to properly resolve imports.
namespace margelo::nitro::nitroark { struct BarkConfigOpts; }

#include <optional>
#include <string>
#include "BarkConfigOpts.hpp"

namespace margelo::nitro::nitroark {

  /**
   * A struct which can be represented as a JavaScript object (BarkCreateOpts).
   */
  struct BarkCreateOpts {
  public:
    std::optional<bool> regtest     SWIFT_PRIVATE;
    std::optional<bool> signet     SWIFT_PRIVATE;
    std::optional<bool> bitcoin     SWIFT_PRIVATE;
    std::string mnemonic     SWIFT_PRIVATE;
    std::optional<double> birthday_height     SWIFT_PRIVATE;
    std::optional<BarkConfigOpts> config     SWIFT_PRIVATE;

  public:
    BarkCreateOpts() = default;
    explicit BarkCreateOpts(std::optional<bool> regtest, std::optional<bool> signet, std::optional<bool> bitcoin, std::string mnemonic, std::optional<double> birthday_height, std::optional<BarkConfigOpts> config): regtest(regtest), signet(signet), bitcoin(bitcoin), mnemonic(mnemonic), birthday_height(birthday_height), config(config) {}
  };

} // namespace margelo::nitro::nitroark

namespace margelo::nitro {

  // C++ BarkCreateOpts <> JS BarkCreateOpts (object)
  template <>
  struct JSIConverter<margelo::nitro::nitroark::BarkCreateOpts> final {
    static inline margelo::nitro::nitroark::BarkCreateOpts fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::nitroark::BarkCreateOpts(
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "regtest")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "signet")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "bitcoin")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "mnemonic")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "birthday_height")),
        JSIConverter<std::optional<margelo::nitro::nitroark::BarkConfigOpts>>::fromJSI(runtime, obj.getProperty(runtime, "config"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::nitroark::BarkCreateOpts& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "regtest", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.regtest));
      obj.setProperty(runtime, "signet", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.signet));
      obj.setProperty(runtime, "bitcoin", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.bitcoin));
      obj.setProperty(runtime, "mnemonic", JSIConverter<std::string>::toJSI(runtime, arg.mnemonic));
      obj.setProperty(runtime, "birthday_height", JSIConverter<std::optional<double>>::toJSI(runtime, arg.birthday_height));
      obj.setProperty(runtime, "config", JSIConverter<std::optional<margelo::nitro::nitroark::BarkConfigOpts>>::toJSI(runtime, arg.config));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!nitro::isPlainObject(runtime, obj)) {
        return false;
      }
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "regtest"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "signet"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "bitcoin"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "mnemonic"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "birthday_height"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::nitroark::BarkConfigOpts>>::canConvert(runtime, obj.getProperty(runtime, "config"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
