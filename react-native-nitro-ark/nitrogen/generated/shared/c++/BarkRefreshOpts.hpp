///
/// BarkRefreshOpts.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `BarkRefreshModeType` to properly resolve imports.
namespace margelo::nitro::nitroark { enum class BarkRefreshModeType; }

#include "BarkRefreshModeType.hpp"
#include <optional>
#include <vector>
#include <string>

namespace margelo::nitro::nitroark {

  /**
   * A struct which can be represented as a JavaScript object (BarkRefreshOpts).
   */
  struct BarkRefreshOpts {
  public:
    BarkRefreshModeType mode_type     SWIFT_PRIVATE;
    std::optional<double> threshold_value     SWIFT_PRIVATE;
    std::optional<std::vector<std::string>> specific_vtxo_ids     SWIFT_PRIVATE;

  public:
    BarkRefreshOpts() = default;
    explicit BarkRefreshOpts(BarkRefreshModeType mode_type, std::optional<double> threshold_value, std::optional<std::vector<std::string>> specific_vtxo_ids): mode_type(mode_type), threshold_value(threshold_value), specific_vtxo_ids(specific_vtxo_ids) {}
  };

} // namespace margelo::nitro::nitroark

namespace margelo::nitro {

  using namespace margelo::nitro::nitroark;

  // C++ BarkRefreshOpts <> JS BarkRefreshOpts (object)
  template <>
  struct JSIConverter<BarkRefreshOpts> final {
    static inline BarkRefreshOpts fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return BarkRefreshOpts(
        JSIConverter<BarkRefreshModeType>::fromJSI(runtime, obj.getProperty(runtime, "mode_type")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "threshold_value")),
        JSIConverter<std::optional<std::vector<std::string>>>::fromJSI(runtime, obj.getProperty(runtime, "specific_vtxo_ids"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const BarkRefreshOpts& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "mode_type", JSIConverter<BarkRefreshModeType>::toJSI(runtime, arg.mode_type));
      obj.setProperty(runtime, "threshold_value", JSIConverter<std::optional<double>>::toJSI(runtime, arg.threshold_value));
      obj.setProperty(runtime, "specific_vtxo_ids", JSIConverter<std::optional<std::vector<std::string>>>::toJSI(runtime, arg.specific_vtxo_ids));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<BarkRefreshModeType>::canConvert(runtime, obj.getProperty(runtime, "mode_type"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "threshold_value"))) return false;
      if (!JSIConverter<std::optional<std::vector<std::string>>>::canConvert(runtime, obj.getProperty(runtime, "specific_vtxo_ids"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
