///
/// HybridNitroArkSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `BarkCreateOpts` to properly resolve imports.
namespace margelo::nitro::nitroark { struct BarkCreateOpts; }
// Forward declaration of `BarkArkInfo` to properly resolve imports.
namespace margelo::nitro::nitroark { struct BarkArkInfo; }
// Forward declaration of `OffchainBalanceResult` to properly resolve imports.
namespace margelo::nitro::nitroark { struct OffchainBalanceResult; }
// Forward declaration of `KeyPairResult` to properly resolve imports.
namespace margelo::nitro::nitroark { struct KeyPairResult; }
// Forward declaration of `NewAddressResult` to properly resolve imports.
namespace margelo::nitro::nitroark { struct NewAddressResult; }
// Forward declaration of `BarkVtxo` to properly resolve imports.
namespace margelo::nitro::nitroark { struct BarkVtxo; }
// Forward declaration of `OnchainBalanceResult` to properly resolve imports.
namespace margelo::nitro::nitroark { struct OnchainBalanceResult; }
// Forward declaration of `OnchainPaymentResult` to properly resolve imports.
namespace margelo::nitro::nitroark { struct OnchainPaymentResult; }
// Forward declaration of `BarkSendManyOutput` to properly resolve imports.
namespace margelo::nitro::nitroark { struct BarkSendManyOutput; }
// Forward declaration of `ArkoorPaymentResult` to properly resolve imports.
namespace margelo::nitro::nitroark { struct ArkoorPaymentResult; }
// Forward declaration of `Bolt11PaymentResult` to properly resolve imports.
namespace margelo::nitro::nitroark { struct Bolt11PaymentResult; }
// Forward declaration of `Bolt12PaymentResult` to properly resolve imports.
namespace margelo::nitro::nitroark { struct Bolt12PaymentResult; }
// Forward declaration of `LnurlPaymentResult` to properly resolve imports.
namespace margelo::nitro::nitroark { struct LnurlPaymentResult; }
// Forward declaration of `LightningReceive` to properly resolve imports.
namespace margelo::nitro::nitroark { struct LightningReceive; }

#include <string>
#include <NitroModules/Promise.hpp>
#include "BarkCreateOpts.hpp"
#include "BarkArkInfo.hpp"
#include "OffchainBalanceResult.hpp"
#include "KeyPairResult.hpp"
#include "NewAddressResult.hpp"
#include "BarkVtxo.hpp"
#include <vector>
#include <optional>
#include "OnchainBalanceResult.hpp"
#include "OnchainPaymentResult.hpp"
#include "BarkSendManyOutput.hpp"
#include "ArkoorPaymentResult.hpp"
#include "Bolt11PaymentResult.hpp"
#include "Bolt12PaymentResult.hpp"
#include "LnurlPaymentResult.hpp"
#include "LightningReceive.hpp"

namespace margelo::nitro::nitroark {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `NitroArk`
   * Inherit this class to create instances of `HybridNitroArkSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridNitroArk: public HybridNitroArkSpec {
   * public:
   *   HybridNitroArk(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridNitroArkSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridNitroArkSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridNitroArkSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<Promise<std::string>> createMnemonic() = 0;
      virtual std::shared_ptr<Promise<void>> createWallet(const std::string& datadir, const BarkCreateOpts& opts) = 0;
      virtual std::shared_ptr<Promise<void>> loadWallet(const std::string& datadir, const BarkCreateOpts& config) = 0;
      virtual std::shared_ptr<Promise<bool>> isWalletLoaded() = 0;
      virtual std::shared_ptr<Promise<void>> closeWallet() = 0;
      virtual std::shared_ptr<Promise<void>> registerAllConfirmedBoards() = 0;
      virtual std::shared_ptr<Promise<void>> maintenance() = 0;
      virtual std::shared_ptr<Promise<void>> maintenanceWithOnchain() = 0;
      virtual std::shared_ptr<Promise<void>> maintenanceRefresh() = 0;
      virtual std::shared_ptr<Promise<void>> sync() = 0;
      virtual std::shared_ptr<Promise<void>> syncExits() = 0;
      virtual std::shared_ptr<Promise<void>> syncPastRounds() = 0;
      virtual std::shared_ptr<Promise<BarkArkInfo>> getArkInfo() = 0;
      virtual std::shared_ptr<Promise<OffchainBalanceResult>> offchainBalance() = 0;
      virtual std::shared_ptr<Promise<KeyPairResult>> deriveStoreNextKeypair() = 0;
      virtual std::shared_ptr<Promise<KeyPairResult>> peakKeyPair(double index) = 0;
      virtual std::shared_ptr<Promise<NewAddressResult>> newAddress() = 0;
      virtual std::shared_ptr<Promise<std::string>> signMessage(const std::string& message, double index) = 0;
      virtual std::shared_ptr<Promise<std::string>> signMesssageWithMnemonic(const std::string& message, const std::string& mnemonic, const std::string& network, double index) = 0;
      virtual std::shared_ptr<Promise<KeyPairResult>> deriveKeypairFromMnemonic(const std::string& mnemonic, const std::string& network, double index) = 0;
      virtual std::shared_ptr<Promise<bool>> verifyMessage(const std::string& message, const std::string& signature, const std::string& publicKey) = 0;
      virtual std::shared_ptr<Promise<std::vector<BarkVtxo>>> getVtxos() = 0;
      virtual std::shared_ptr<Promise<std::optional<double>>> getFirstExpiringVtxoBlockheight() = 0;
      virtual std::shared_ptr<Promise<std::optional<double>>> getNextRequiredRefreshBlockheight() = 0;
      virtual std::shared_ptr<Promise<std::vector<BarkVtxo>>> getExpiringVtxos(double threshold) = 0;
      virtual std::shared_ptr<Promise<OnchainBalanceResult>> onchainBalance() = 0;
      virtual std::shared_ptr<Promise<void>> onchainSync() = 0;
      virtual std::shared_ptr<Promise<std::string>> onchainListUnspent() = 0;
      virtual std::shared_ptr<Promise<std::string>> onchainUtxos() = 0;
      virtual std::shared_ptr<Promise<std::string>> onchainAddress() = 0;
      virtual std::shared_ptr<Promise<OnchainPaymentResult>> onchainSend(const std::string& destination, double amountSat, std::optional<double> feeRate) = 0;
      virtual std::shared_ptr<Promise<std::string>> onchainDrain(const std::string& destination, std::optional<double> feeRate) = 0;
      virtual std::shared_ptr<Promise<std::string>> onchainSendMany(const std::vector<BarkSendManyOutput>& outputs, std::optional<double> feeRate) = 0;
      virtual std::shared_ptr<Promise<std::string>> boardAmount(double amountSat) = 0;
      virtual std::shared_ptr<Promise<std::string>> boardAll() = 0;
      virtual std::shared_ptr<Promise<void>> validateArkoorAddress(const std::string& address) = 0;
      virtual std::shared_ptr<Promise<ArkoorPaymentResult>> sendArkoorPayment(const std::string& destination, double amountSat) = 0;
      virtual std::shared_ptr<Promise<Bolt11PaymentResult>> sendLightningPayment(const std::string& destination, std::optional<double> amountSat) = 0;
      virtual std::shared_ptr<Promise<Bolt12PaymentResult>> payOffer(const std::string& offer, std::optional<double> amountSat) = 0;
      virtual std::shared_ptr<Promise<LnurlPaymentResult>> sendLnaddr(const std::string& addr, double amountSat, const std::string& comment) = 0;
      virtual std::shared_ptr<Promise<std::string>> sendRoundOnchainPayment(const std::string& destination, double amountSat) = 0;
      virtual std::shared_ptr<Promise<std::string>> bolt11Invoice(double amountMsat) = 0;
      virtual std::shared_ptr<Promise<std::optional<LightningReceive>>> lightningReceiveStatus(const std::string& paymentHash) = 0;
      virtual std::shared_ptr<Promise<std::vector<LightningReceive>>> lightningReceives(double pageSize, double pageIndex) = 0;
      virtual std::shared_ptr<Promise<void>> finishLightningReceive(const std::string& bolt11) = 0;
      virtual std::shared_ptr<Promise<std::string>> offboardSpecific(const std::vector<std::string>& vtxoIds, const std::string& destinationAddress) = 0;
      virtual std::shared_ptr<Promise<std::string>> offboardAll(const std::string& destinationAddress) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "NitroArk";
  };

} // namespace margelo::nitro::nitroark
