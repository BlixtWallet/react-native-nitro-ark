///
/// HybridNitroArkSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `BarkCreateOpts` to properly resolve imports.
namespace margelo::nitro::nitroark { struct BarkCreateOpts; }
// Forward declaration of `BarkConfigOpts` to properly resolve imports.
namespace margelo::nitro::nitroark { struct BarkConfigOpts; }
// Forward declaration of `BarkArkInfo` to properly resolve imports.
namespace margelo::nitro::nitroark { struct BarkArkInfo; }
// Forward declaration of `BarkSendManyOutput` to properly resolve imports.
namespace margelo::nitro::nitroark { struct BarkSendManyOutput; }

#include <NitroModules/Promise.hpp>
#include <string>
#include "BarkCreateOpts.hpp"
#include "BarkConfigOpts.hpp"
#include "BarkArkInfo.hpp"
#include <optional>
#include <vector>
#include "BarkSendManyOutput.hpp"

namespace margelo::nitro::nitroark {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `NitroArk`
   * Inherit this class to create instances of `HybridNitroArkSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridNitroArk: public HybridNitroArkSpec {
   * public:
   *   HybridNitroArk(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridNitroArkSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridNitroArkSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridNitroArkSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<Promise<std::string>> createMnemonic() = 0;
      virtual std::shared_ptr<Promise<void>> loadWallet(const std::string& datadir, const BarkCreateOpts& opts) = 0;
      virtual std::shared_ptr<Promise<void>> closeWallet() = 0;
      virtual std::shared_ptr<Promise<bool>> isWalletLoaded() = 0;
      virtual std::shared_ptr<Promise<void>> persistConfig(const BarkConfigOpts& opts) = 0;
      virtual std::shared_ptr<Promise<void>> maintenance() = 0;
      virtual std::shared_ptr<Promise<void>> sync() = 0;
      virtual std::shared_ptr<Promise<void>> syncArk() = 0;
      virtual std::shared_ptr<Promise<void>> syncRounds() = 0;
      virtual std::shared_ptr<Promise<BarkArkInfo>> getArkInfo() = 0;
      virtual std::shared_ptr<Promise<double>> onchainBalance() = 0;
      virtual std::shared_ptr<Promise<double>> offchainBalance() = 0;
      virtual std::shared_ptr<Promise<std::string>> getOnchainAddress() = 0;
      virtual std::shared_ptr<Promise<std::string>> getOnchainUtxos(bool no_sync) = 0;
      virtual std::shared_ptr<Promise<std::string>> getVtxoPubkey(std::optional<double> index) = 0;
      virtual std::shared_ptr<Promise<std::string>> getVtxos(bool no_sync) = 0;
      virtual std::shared_ptr<Promise<std::string>> sendOnchain(const std::string& destination, double amountSat, bool no_sync) = 0;
      virtual std::shared_ptr<Promise<std::string>> drainOnchain(const std::string& destination, bool no_sync) = 0;
      virtual std::shared_ptr<Promise<std::string>> sendManyOnchain(const std::vector<BarkSendManyOutput>& outputs, bool no_sync) = 0;
      virtual std::shared_ptr<Promise<std::string>> boardAmount(double amountSat) = 0;
      virtual std::shared_ptr<Promise<std::string>> boardAll() = 0;
      virtual std::shared_ptr<Promise<std::string>> sendArkoorPayment(const std::string& destination, double amountSat) = 0;
      virtual std::shared_ptr<Promise<std::string>> sendBolt11Payment(const std::string& destination, std::optional<double> amountSat) = 0;
      virtual std::shared_ptr<Promise<std::string>> sendLnaddr(const std::string& addr, double amountSat, const std::string& comment) = 0;
      virtual std::shared_ptr<Promise<std::string>> sendRoundOnchain(const std::string& destination, double amountSat, bool no_sync) = 0;
      virtual std::shared_ptr<Promise<std::string>> bolt11Invoice(double amountMsat) = 0;
      virtual std::shared_ptr<Promise<void>> claimBolt11Payment(const std::string& bolt11) = 0;
      virtual std::shared_ptr<Promise<std::string>> offboardSpecific(const std::vector<std::string>& vtxoIds, const std::string& destinationAddress, bool no_sync) = 0;
      virtual std::shared_ptr<Promise<std::string>> offboardAll(const std::string& destinationAddress, bool no_sync) = 0;
      virtual std::shared_ptr<Promise<std::string>> exitStartSpecific(const std::vector<std::string>& vtxoIds) = 0;
      virtual std::shared_ptr<Promise<std::string>> exitStartAll() = 0;
      virtual std::shared_ptr<Promise<std::string>> exitProgressOnce() = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "NitroArk";
  };

} // namespace margelo::nitro::nitroark
